# Generated by Django 5.2 on 2025-04-28 01:52

import os
from urllib.parse import urlparse
import urllib.request

from django.core.files import File
import django.core.files.storage
from django.db import migrations, models

from viewmaster.api import get_movie, RequestFailed
from viewmaster.extractors import (
    extract_rating,
    extract_time,
    extract_year,
    filter_genres,
)


def get_ext(url):
    """Get the file (image) extension, from the URL."""
    parsed = urlparse(url)
    root, ext = os.path.splitext(parsed.path)
    return ext


def copy_imdb_info(apps, schema_editor):
    """Copy all IMDB info to new table."""
    Movie = apps.get_model("viewmaster", "Movie")
    ImdbInfo = apps.get_model("viewmaster", "ImdbInfo")

    total = 0
    count = 0
    missing = 0
    bad = 0
    dups = 0
    no_cover = 0
    print("\n\nMigration: Building new IMDB info and linking to movies...")
    for m in Movie.objects.order_by("title"):
        total += 1
        if not m.movie_id.startswith("tt"):
            print(f"{m.title} UNKNOWN: No IMDB ID ({m.movie_id})")
            missing += 1
            continue
        imdb = ImdbInfo.objects.filter(identifier=m.movie_id).first()
        if imdb:
            print(f"{m.title} DUPLICATE: Already have {m.movie_id} info - linking")
            dups += 1
            m.imdb_info = imdb
            m.save()
            continue
        try:
            imdb_info = get_movie(m.movie_id)
        except RequestFailed as f:
            print(f"{m.title} ERROR: Request failed for IMDB ID {m.movie_id}: {f}")
            bad += 1
            continue
        if imdb_info.get("Response", "Unknown") != "True":
            print(f"{m.title} ERROR: Unable to get info for IMDB ID {m.movie_id}")
            bad += 1
            continue
        # Bave IMDB info to save
        genres_list, processing_msgs = filter_genres(imdb_info.get("Genre", ""))
        imdb = ImdbInfo(
            identifier=m.movie_id,
            title=imdb_info.get("Title", "MISSING TITLE!!!!"),
            rating=extract_rating(imdb_info.get("Rated", "?")),
            duration=extract_time(imdb_info.get("Runtime", "?")),
            release=extract_year(imdb_info.get("Year", "?")),
            plot=imdb_info.get("Plot", ""),
            actors=imdb_info.get("Actors", ""),
            directors=imdb_info.get("Director", ""),
            cover_url=imdb_info.get("Poster", ""),
            genres=genres_list,
        )
        # Try to save cover
        if imdb.cover_url.startswith("http"):
            file_name = f"{imdb.identifier}{get_ext(imdb.cover_url)}"
            try:
                result = urllib.request.urlretrieve(imdb.cover_url)
                with open(result[0], mode="rb") as f:
                    imdb.cover_file.save(file_name, File(f))
            except urllib.error.HTTPError as e:
                processing_msgs.append(
                    f"WARNING: Unable to access cover for {m.movie_id}: "
                    f"{imdb.cover_url}: {e}"
                )
                no_cover += 1
        imdb.save()
        m.imdb_info = imdb
        m.save()
        print(
            f"{m.title} CREATED: Collected IMDB info for "
            f"{m.movie_id} ({imdb.cover_file}) and saved"
        )
        count += 1
        for msg in processing_msgs:
            print(f"    {msg}")
    print(
        "\nSTATS:\n"
        f"    Movies:       {total}\n"
        f"    IMDB Created: {count}\n"
        f"    Duplicates:   {dups}\n"
        f"    No Cover:     {no_cover}\n"
        f"    Missing:      {missing}\n"
        f"    Bad:          {bad}\n"
    )


class Migration(migrations.Migration):

    dependencies = [
        ("viewmaster", "0008_alter_movie_category"),
    ]

    operations = [
        migrations.AlterField(
            model_name="movie",
            name="category",
            field=models.CharField(
                choices=[
                    ("ACTION", "action"),
                    ("ADVENTURE", "adventure"),
                    ("ANIMATED", "animated"),
                    ("BIOGRAPHY", "biography"),
                    ("CHILDRENS", "childrens"),
                    ("COMEDY", "comedy"),
                    ("CRIME", "crime"),
                    ("DOCUMENTARY", "documentary"),
                    ("DRAMA", "drama"),
                    ("FAMILY", "family"),
                    ("FANTASY", "fantasy"),
                    ("HISTORY", "history"),
                    ("HORROR", "horror"),
                    ("MILITARY", "military"),
                    ("MISC", "misc"),
                    ("MUSICAL", "musical"),
                    ("MYSTERY", "mystery"),
                    ("ROMANCE", "romance"),
                    ("SCI-FI", "sci-fi"),
                    ("SPORTS", "sports"),
                    ("SUSPENSE", "suspense"),
                    ("THRILLER", "thriller"),
                    ("UNKNOWN", "unknown"),
                    ("WESTERN", "western"),
                ],
                help_text="Select a genre",
                max_length=20,
            ),
        ),
        migrations.CreateModel(
            name="ImdbInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        help_text="IMDB movie ID.", max_length=20, unique=True
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Up to 60 characters for title. May be overridden.",
                        max_length=60,
                    ),
                ),
                (
                    "release",
                    models.IntegerField(
                        help_text="Four digit year of release. May be overridden."
                    ),
                ),
                (
                    "genres",
                    models.CharField(
                        help_text="List of genres applicable to the movie."
                    ),
                ),
                (
                    "plot",
                    models.CharField(blank=True, default="", help_text="Plot summary."),
                ),
                (
                    "actors",
                    models.CharField(blank=True, default="", help_text="Top cast."),
                ),
                (
                    "directors",
                    models.CharField(blank=True, default="", help_text="Director(s)."),
                ),
                (
                    "rating",
                    models.CharField(
                        choices=[
                            ("G", "G"),
                            ("PG", "PG"),
                            ("PG-13", "PG-13"),
                            ("R", "R"),
                            ("X", "X"),
                            ("NR", "NR"),
                            ("?", "?"),
                        ],
                        default="?",
                        help_text="Select the MPAA rating. May be overridden.",
                        max_length=5,
                    ),
                ),
                (
                    "duration",
                    models.TimeField(
                        help_text="Duration in hh:mm format. May be overridden."
                    ),
                ),
                (
                    "cover_url",
                    models.URLField(
                        blank=True,
                        default="",
                        help_text="URL where poster image is located.",
                    ),
                ),
                (
                    "cover_file",
                    models.ImageField(
                        blank=True,
                        null=True,
                        storage=django.core.files.storage.FileSystemStorage(
                            allow_overwrite=True
                        ),
                        upload_to="covers",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="movie",
            name="imdb_info",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="viewmaster.imdbinfo",
            ),
        ),
        migrations.RunPython(copy_imdb_info, migrations.RunPython.noop),
    ]
