# Generated by Django 4.2.14 on 2025-04-23 23:56

import os
from urllib.parse import urlparse
import urllib.request

from django.core.files import File
from django.db import migrations, models

from movie_library.settings import MEDIA_ROOT


def get_ext(url):
    """Get the file (image) extension, from the URL."""
    parsed = urlparse(url)
    root, ext = os.path.splitext(parsed.path)
    return ext


def download_covers(apps, schema_editor):
    """Download the images to media location."""
    print("\nData migration for saving movie covers...")
    MovieDetails = apps.get_model("viewmaster", "MovieDetails")
    total = 0
    count = 0
    unknown = 0
    missing = 0
    skipped = 0
    dups = 0
    bad = 0
    print("\n\nMigrating data - getting cover files...")
    details = MovieDetails.objects.order_by("title").all()
    for d in details:
        total += 1
        if not d.source.startswith("tt"):
            print(f"{d.title} UNKNOWN: No IMDB info")
            unknown += 1
            continue
        if not d.cover_url.startswith("http"):
            print(f"{d.title} MISSING: No cover URL")
            missing += 1
            continue
        if not d.cover_file:
            file_name = f"{d.source}{get_ext(d.cover_url)}"
            if os.path.exists(os.path.join(MEDIA_ROOT, "covers", file_name)):
                # If series, with different titles, can have same cover.
                print(f"{d.title} DUPLICATE: Already have cover file - overwriting")
                dups += 1
            try:
                result = urllib.request.urlretrieve(d.cover_url)
            except urllib.error.HTTPError as e:
                print(f"{d.title} ERROR: Unable to retrieve URL {d.cover_url}: {e}")
                bad += 1
                continue
            with open(result[0], mode="rb") as f:
                d.cover_file.save(file_name, File(f))
            d.save()
            # print(f"{d.title} OK: Stored covers/{file_name}")
            count += 1
        else:
            print(f"{d.title} SKIPPED: Already have cover downloaded")
            skipped += 1
    print(
        "\nSTATS:\n"
        f"    Total:    {total}\n"
        f"    Stored:   {count} ({dups} overwritten)\n"
        f"    Skipped:  {skipped}\n"
        f"    Unknown:  {unknown}\n"
        f"    Missing:  {missing}\n"
        f"    Bad URLs: {bad}\n"
    )


def remove_covers(apps, schema_editor):
    """Remove any covers that have been stored."""
    print("\n\nData reverse migration - removing movie covers...")
    MovieDetails = apps.get_model("viewmaster", "MovieDetails")
    details = MovieDetails.objects.order_by("title").all()
    total = 0
    count = 0
    ignored = 0
    missing = 0
    for d in details:
        total += 1
        if d.cover_file:
            full_path = os.path.join(MEDIA_ROOT, d.cover_file.name)
            if os.path.exists(full_path):
                os.remove(full_path)
                count += 1
                # print(f"{d.title} removed {d.cover_file.name}")
            else:
                print(f"{d.title} MISSING file {full_name}")
                missing += 1
            d.cover_file = None
            d.save()
        else:
            print(f"{d.title} IGNORED - No cover file")
            ignored += 1
    print(
        "\nSTATS:\n"
        f"    Total:   {total}\n"
        f"    Removed: {count}\n"
        f"    Missing: {missing}\n"
        f"    No URL:  {ignored}\n"
    )


class Migration(migrations.Migration):

    dependencies = [
        ("viewmaster", "0011_remove_movie_actors_remove_movie_category_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="moviedetails",
            name="cover_file",
            field=models.ImageField(blank=True, null=True, upload_to="covers"),
        ),
        migrations.RunPython(download_covers, remove_covers),
    ]
